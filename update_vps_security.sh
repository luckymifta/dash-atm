#!/bin/bash

# VPS Environment Update Script for Security Improvements
# This script helps update your VPS .env file with the new security requirements

set -e  # Exit on any error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
VPS_USER="luckymifta"
VPS_HOST="your-vps-ip"  # Update this with your actual VPS IP
VPS_PATH="/var/www/dash-atm"
BACKUP_SUFFIX=$(date +%Y%m%d_%H%M%S)

echo -e "${BLUE}🔒 VPS Security Environment Update Script${NC}"
echo "=================================================="

# Function to print colored output
print_status() {
    echo -e "${GREEN}✓${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}⚠️${NC} $1"
}

print_error() {
    echo -e "${RED}❌${NC} $1"
}

print_info() {
    echo -e "${BLUE}ℹ️${NC} $1"
}

# Generate secure keys
echo -e "\n${BLUE}🔐 Generating secure keys...${NC}"
JWT_SECRET=$(python3 -c "import secrets; print(secrets.token_urlsafe(32))")
PASSWORD_RESET_SECRET=$(python3 -c "import secrets; print(secrets.token_urlsafe(32))")

print_status "Generated JWT_SECRET_KEY: ${JWT_SECRET:0:20}..."
print_status "Generated PASSWORD_RESET_SECRET: ${PASSWORD_RESET_SECRET:0:20}..."

# Create VPS-ready .env file
echo -e "\n${BLUE}📝 Creating VPS-ready .env file...${NC}"

cat > .env.vps.ready << EOF
# VPS Production Environment - Updated $(date)
# Generated by VPS update script

# =====================================================
# DATABASE CONFIGURATION
# =====================================================
DB_HOST=localhost
DB_PORT=5432
DB_NAME=development_db
DB_USER=timlesdev
DB_PASSWORD=timlesdev

# =====================================================
# SECURITY CONFIGURATION (REQUIRED - UPDATED)
# =====================================================
JWT_SECRET_KEY=${JWT_SECRET}
JWT_ALGORITHM=HS256
PASSWORD_RESET_SECRET=${PASSWORD_RESET_SECRET}

# =====================================================
# TOKEN EXPIRATION SETTINGS (NEW)
# =====================================================
ACCESS_TOKEN_EXPIRE_MINUTES=30
REFRESH_TOKEN_EXPIRE_DAYS=30
PASSWORD_RESET_TOKEN_EXPIRE_HOURS=24
REMEMBER_ME_DAYS=30

# =====================================================
# ACCOUNT SECURITY SETTINGS (NEW)
# =====================================================
MAX_FAILED_ATTEMPTS=5
ACCOUNT_LOCKOUT_MINUTES=15
SESSION_TIMEOUT_WARNING_MINUTES=5

# =====================================================
# CORS CONFIGURATION (FIXED FORMAT)
# =====================================================
CORS_ORIGINS=https://dash.britimorleste.tl
CORS_ALLOW_CREDENTIALS=true

# =====================================================
# APPLICATION CONFIGURATION
# =====================================================
ENVIRONMENT=production
DEBUG=false
LOG_LEVEL=INFO
FRONTEND_BASE_URL=https://dash.britimorleste.tl

# Timezone Configuration
TIMEZONE=Asia/Dili
AUTO_LOGOUT_DILI_TIME=00:00

# =====================================================
# EMAIL CONFIGURATION (Mailjet)
# =====================================================
MAILJET_API_KEY=8cd3d335497e2d3359d3190226d7d6c8
MAILJET_SECRET_KEY=0fd32b8449100ec46872b66f98904db5
MAILJET_FROM_EMAIL=dash@britimorleste.tl
MAILJET_FROM_NAME=ATM Dashboard

# =====================================================
# LEGACY CONFIGURATIONS (For backward compatibility)
# =====================================================
FASTAPI_HOST=0.0.0.0
FASTAPI_PORT=8000
FASTAPI_WORKERS=4

USER_API_HOST=0.0.0.0
USER_API_PORT=8001
USER_API_WORKERS=2

SECRET_KEY=2QNQK08xRdLElX4hT6zy61AqKdUFcGMT+r+XCzSEJIUV/WQYNcls8SBD3P8TKlqmG7pcl+VdwDhHU122/pbG7A==
NEXTAUTH_SECRET=UOofTfjpYk8UjQAmn59UNvtwoEaobLNt1dB8XKlKHW8=

LOG_FILE=/var/log/dash-atm/app.log

NOTIFICATION_CHECK_INTERVAL=300
NOTIFICATION_CLEANUP_DAYS=30
NOTIFICATION_TIMEZONE=Asia/Dili
NOTIFICATION_DB_HOST=localhost
NOTIFICATION_DB_PORT=5432
NOTIFICATION_DB_NAME=development_db
NOTIFICATION_DB_USER=timlesdev
NOTIFICATION_DB_PASSWORD=timlesdev
EOF

print_status "Created .env.vps.ready file with secure configuration"

echo -e "\n${BLUE}📋 Manual VPS Update Instructions:${NC}"
echo "=================================================="
echo "1. Upload the security verification script:"
echo "   scp verify_security.py ${VPS_USER}@${VPS_HOST}:${VPS_PATH}/"
echo ""
echo "2. Upload the new .env file:"
echo "   scp .env.vps.ready ${VPS_USER}@${VPS_HOST}:${VPS_PATH}/backend/.env.new"
echo ""
echo "3. SSH into your VPS and run these commands:"
echo "   ssh ${VPS_USER}@${VPS_HOST}"
echo "   cd ${VPS_PATH}"
echo ""
echo "4. Backup current .env file:"
echo "   sudo cp backend/.env backend/.env.backup.${BACKUP_SUFFIX}"
echo ""
echo "5. Update with new .env file:"
echo "   sudo mv backend/.env.new backend/.env"
echo ""
echo "6. Verify the configuration:"
echo "   python3 verify_security.py"
echo ""
echo "7. Test the application:"
echo "   cd backend && python3 -c 'from user_management_api import app; print(\"✅ App loads successfully\")'"
echo ""
echo "8. Restart your services:"
echo "   sudo systemctl restart your-service-name"
echo "   # or if using PM2:"
echo "   pm2 restart all"
echo ""

echo -e "\n${BLUE}🔍 Key Changes Made:${NC}"
echo "=================================================="
print_status "Added JWT_SECRET_KEY and PASSWORD_RESET_SECRET"
print_status "Fixed CORS_ORIGINS format (removed JSON array brackets)"
print_status "Added token expiration settings"
print_status "Added account security settings"
print_status "Added timezone configuration"
print_status "Set ENVIRONMENT=production"
print_status "Set proper FRONTEND_BASE_URL"

echo -e "\n${YELLOW}⚠️  Important Notes:${NC}"
echo "=================================================="
print_warning "The old CORS_ORIGINS format was: [\"https://dash.britimorleste.tl\", \"http://localhost:3000\"]"
print_warning "The new format is: https://dash.britimorleste.tl (comma-separated, no brackets)"
print_warning "Make sure to test the application after updating"
print_warning "Keep the backup file in case you need to rollback"

echo -e "\n${GREEN}✅ Ready for VPS deployment!${NC}"
echo "Files created:"
echo "  - .env.vps.ready (ready to upload to VPS)"
echo "  - This script can be run again to generate new keys if needed"

# Optional: Direct SCP if VPS details are configured
read -p "Do you want to upload files to VPS now? (y/N): " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    if [[ "$VPS_HOST" != "your-vps-ip" ]]; then
        echo -e "\n${BLUE}📤 Uploading files to VPS...${NC}"
        
        # Upload verification script
        if scp verify_security.py "${VPS_USER}@${VPS_HOST}:${VPS_PATH}/"; then
            print_status "Uploaded verify_security.py"
        else
            print_error "Failed to upload verify_security.py"
        fi
        
        # Upload new .env file
        if scp .env.vps.ready "${VPS_USER}@${VPS_HOST}:${VPS_PATH}/backend/.env.new"; then
            print_status "Uploaded .env.vps.ready as .env.new"
        else
            print_error "Failed to upload .env file"
        fi
        
        echo -e "\n${GREEN}✅ Files uploaded! Now SSH into your VPS and follow the manual steps above.${NC}"
    else
        print_error "Please update VPS_HOST in this script with your actual VPS IP address"
    fi
else
    echo -e "\n${BLUE}ℹ️ You can upload the files manually using the SCP commands shown above.${NC}"
fi
